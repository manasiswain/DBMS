-- Creating database

\c postgres
DROP DATABASE BLOOD_BANK_DBMS;
CREATE DATABASE BLOOD_BANK_DBMS;
\c blood_bank_dbms;


CREATE TABLE RECEPTIONIST (
    EMPLOYEE_ID INT PRIMARY KEY,
    PHONE_NO varchar (10),
    --  CHECK (PHONE_NO LIKE '[0-9]*10'),
    --  CHECK (PHONE_NO LIKE '\d[\d -]{8,12}\d'),
    ADDRESS VARCHAR (25),
    NAME VARCHAR (20) NOT NULL
);


CREATE TABLE DONOR (
    NAME VARCHAR (20) NOT NULL,
    DONOR_ID INT PRIMARY KEY NOT NULL,
    ADDRESS CHAR (25),
    AGE INT CHECK (AGE BETWEEN 0 AND 150),
    PHONE_NO varchar (10),
    SEX VARCHAR (1),
    E_ID INT,
    FOREIGN KEY (E_ID) REFERENCES RECEPTIONIST(EMPLOYEE_ID)
);


CREATE TABLE BLOOD_BANK (
    ORDERS INT CHECK (ORDERS > 0),
    --  BLOOD_TYPE VARCHAR (3),
    B_NO INT PRIMARY KEY,
    E_ID INT,
    FOREIGN KEY (E_ID) REFERENCES RECEPTIONIST (EMPLOYEE_ID) -- 1:1 relationship
);


CREATE TABLE BLOOD (
    VOLUME INT CHECK (VOLUME > 0 AND VOLUME < 1000),
    CODE VARCHAR (10) PRIMARY KEY,
    BLOOD_TYPE VARCHAR (3),
    DONOR_ID INT,
    BB_NO INT,
    FOREIGN KEY (DONOR_ID) REFERENCES DONOR(DONOR_ID),
    FOREIGN KEY (BB_NO) REFERENCES BLOOD_BANK(B_NO)
);


CREATE TABLE STOCK (
    STOCK_ID INT PRIMARY KEY,
    STOCK_AMT INT CHECK (STOCK_AMT > 0),
    STOCK_DESC VARCHAR (100),
    BB_NO INT,
    FOREIGN KEY (BB_NO) REFERENCES BLOOD_BANK(B_NO)
);


CREATE TABLE BLOOD_BANK_MANAGER (
    EMPLOYEE_ID INT,
    EMAIL_ID VARCHAR (25),
    PHONE_NO varchar (10),
    NAME VARCHAR (20) NOT NULL,
    BB_NO INT,
    PRIMARY KEY (EMPLOYEE_ID, EMAIL_ID),
    FOREIGN KEY (BB_NO) REFERENCES BLOOD_BANK(B_NO)
);


CREATE TABLE HOSPITALS (
    NAME VARCHAR (20) PRIMARY KEY,
    ADDRESS CHAR (25),
    PHONE_NO varchar (10)
);


CREATE TABLE PATIENT (
    NAME VARCHAR (20) NOT NULL,
    PATIENT_ID INT PRIMARY KEY NOT NULL,
    ADDRESS CHAR (25),
    AGE INT CHECK (AGE BETWEEN 0 AND 150),
    PHONE_NO varchar (10),
    SEX VARCHAR (1),
    H_NAME VARCHAR (20),
    FOREIGN KEY (H_NAME) REFERENCES HOSPITALS(NAME)
);


-- M:N relationship being mapped here
CREATE TABLE ORDERS (
    H_NAME varchar (20),
    BB_NO int,
    FOREIGN KEY (H_NAME) REFERENCES HOSPITALS(NAME),
    FOREIGN KEY (BB_NO) REFERENCES BLOOD_BANK(B_NO)
);


--  SELECT *
--  FROM BLOOD_BANK_MANAGER
--  FULL OUTER JOIN BLOOD_BANK
--  ON BLOOD_BANK_MANAGER.matching_column = BLOOD_BANK.matching_column;


--  testdb=# SELECT EMP_ID, NAME, DEPT FROM COMPANY FULL OUTER JOIN DEPARTMENT
   --  ON COMPANY.ID = DEPARTMENT.EMP_ID;


